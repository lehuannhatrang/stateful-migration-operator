apiVersion: apps/v1
kind: Deployment
metadata:
  name: migration-backup-controller
  namespace: stateful-migration
  labels:
    app.kubernetes.io/name: migration-backup-controller
    app.kubernetes.io/component: controller
    control-plane: migration-backup-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: migration-backup-controller
      control-plane: migration-backup-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: migration-backup-controller
        control-plane: migration-backup-controller
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      serviceAccountName: migration-backup-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
      containers:
      - name: manager
        # Replace with your actual Docker Hub image
        image: lehuannhatrang/stateful-migration-operator:latest
        imagePullPolicy: Always
        command:
        - /manager
        args:
        - --leader-elect
        - --metrics-bind-address=0.0.0.0:8080
        - --health-probe-bind-address=0.0.0.0:8081
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: karmada-kubeconfig
          mountPath: /etc/karmada
          readOnly: true
      volumes:
      - name: karmada-kubeconfig
        secret:
          secretName: karmada-kubeconfig
          items:
          - key: kubeconfig
            path: kubeconfig
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      nodeSelector:
        kubernetes.io/os: linux 